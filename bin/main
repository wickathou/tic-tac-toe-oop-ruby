#!/usr/bin/env ruby

require 'tty-prompt'

# GAME CLASS
class Game
  def initialize
    greeting
    start_decision_maker
    create_board
    user_input
    check_for_winner
  end

  def greeting
    puts "Hello! Welcome to Tic-Tac-Toe!"
    puts "Please Select, Would you like to be Player ❌ or Player 🔵?"
  end

  def start_decision_maker
    @decision_maker = Decision_Maker.new
    puts @decision_maker.response_message
  end

  def user_input
    @decision_maker.move_sequence
    puts @decision_maker.response_message
  end

  def create_board
    puts 'Here is your starting Board. As you can see, it is empty'
    puts 'Select a position between 1-9 As long as it is available'
    @the_board = Board.new
    puts @the_board.the_actual_board
    #creates the new something of the board
  end
end

class Player
  def initialize(symbol)
    @symbol = symbol
  end

  def to_s
    @symbol
  end
end
  
class Decision_Maker
  attr_reader :response_message
  # possibilities        [0]      [1]       [2]       [3]       [4]     [5]       [6]     [7]
  WIN_POSSIBILITIES = [[0,1,2], [3,4,5], [6, 7, 8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6]]

  def initialize
    get_symbol
    get_board
    @moves = {'1'=>'1','2'=>'2','3'=>'3','4'=>'4','5'=>'5','6'=>'6','7'=>'7','8'=>'8','9'=>'9'}
  end

  def get_symbol
    @players = []
    # This creates the selector where the users chooses their symbol
    symbol_list = ['❌','🔵']
    prompt = TTY::Prompt.new
    symb = prompt.enum_select("Player 1! Select your symbol?", symbol_list)
    # This stores the player objects in an instance array
    @players << Player.new(symb)
    @player_turn = @players[0]
    @players << Player.new(symbol_list.select{|x| x!=symb}[0])
    # This returns a response message to be printed
    @response_message = "Player 1 chose #{@players[0]}, Player 2 get #{@players[1]}"
  end

  def get_board
    @board = Board.new
  end

  # once games starts requests 1st move until no more spots are avlbl on board
  def move_sequence
    starting_move
    move
    puts @board.the_actual_board

    until @moves.nil?
      current_player
      get_move
      move
      check_for_winner
      puts @board.the_actual_board
    end
  end
  
  #alternates turns between players
  def current_player
    player1 = @players[0]
    player2 = @players[1]
  
    if @player_turn == player1
      @player_turn = player2
      else 
      @player_turn = player1
    end
  end

  def move
    puts @response_message = "Okay #{@player_turn} it's your turn"
    @board.print_move(@move, @player_turn)
  end

  def starting_move
    # This creates the selector where the users chooses their symbol
    prompt = TTY::Prompt.new
    @move = prompt.enum_select("make a move?", @moves)
    position_remover(@move)
    @response_message = "Awesome! You have moved to space #{@move}!"
  end

  def get_move
    prompt = TTY::Prompt.new
    @move = prompt.enum_select("make a move?", @moves)
    position_remover(@move)
    @response_message = "Awesome! You have moved to space #{@move}!"
  end

  # removes options form the prompt as they become selected
  def position_remover(position)
    @moves.delete(position)
  end

  #checks for win
  def check_for_winner
    WIN_POSSIBILITIES.each do |possibilities|
      case @board.board.values_at(*possibilities)
      when %w(o o o)
        return 'Player 1 wins'
      when %w(x x x)
        return 'Player 2 wins'
      end
    end
  end

end


class Board
  attr_reader :board

  def initialize
    @board = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
    the_actual_board
  end

  def the_actual_board
    board_array = [
      " #{@board[0]} | #{@board[1]} | #{@board[2]} ",
      '-----------',
      " #{@board[3]} | #{@board[4]} | #{@board[5]} ",
      '-----------',
      " #{@board[6]} | #{@board[7]} | #{@board[8]} "
    ]
  end

  def print_move(move, player_turn)
    @board[move.to_i-1] = player_turn
  end
end

Game.new
